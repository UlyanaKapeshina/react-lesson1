{"version":3,"sources":["components/Article.js","components/News.js","components/Add.js","App.js","serviceWorker.js","index.js"],"names":["Article","state","visible","handleMoreClick","e","preventDefault","setState","this","props","data","author","text","bigText","console","log","className","href","onClick","React","Component","News","renderNews","length","map","item","key","id","handlerNewsCountClick","Add","name","checked","onInputChangeHandler","currentTarget","value","onCheckboxChangeHandler","validate","trim","onBtnClickHandler","onAddNews","Date","type","placeholder","onChange","htmlFor","disabled","App","news","isLoading","handleAddNews","nextNews","fetch","then","response","json","setTimeout","Array","isArray","filteredNews","forEach","it","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abca41f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Article extends React.Component {\r\n    state = {\r\n      visible: false,\r\n    }\r\n    handleMoreClick = (e) => {\r\n      e.preventDefault()\r\n      this.setState({ visible: true })\r\n    }\r\n    render() {\r\n      const { author, text, bigText } = this.props.data\r\n      const { visible } = this.state\r\n      console.log('render', this); // добавили console.log\r\n  \r\n      return <div className=\"article\">\r\n        <p className=\"news__author\">{author}:</p>\r\n        <p className=\"news__text\">{text}</p>\r\n        {!visible && <a href=\"#sasa\" className=\"news__redMore\" onClick={this.handleMoreClick}>Подробнее</a>}\r\n        {visible && <p className=\"news__big-text\">{bigText}</p>}\r\n      </div>\r\n  \r\n    }\r\n  }\r\n  Article.propTypes = {\r\n    data: PropTypes.shape({\r\n      author: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n      bigText: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n    })\r\n  }\r\n\r\n  export default Article","import React from 'react';\r\n\r\nimport Article from './Article'\r\n\r\nclass News extends React.Component {\r\n\r\n  \r\n    renderNews = () => {\r\n  \r\n      const { data } = this.props;\r\n      let newsTemplate;\r\n      if (data.length) {\r\n        newsTemplate = this.props.data.map((item) => {\r\n          return <Article key={item.id} data={item} />\r\n        })\r\n      } else {\r\n        newsTemplate = <p>К сожалению новостей нет</p>\r\n      }\r\n      return newsTemplate;\r\n    }\r\n    render() {\r\n  \r\n      const { data } = this.props;\r\n  \r\n      return <div className=\"news\">\r\n        {this.renderNews()}\r\n        {data.length ? <strong onClick={this.handlerNewsCountClick}>Количество новостей:  {data.length}</strong> : null}\r\n  \r\n      </div>\r\n    }\r\n  }\r\n\r\n  export default News","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Add extends React.Component {\r\n\r\n    state = {\r\n      name: '',\r\n      text: '',\r\n      bigText: '',\r\n      checked: false\r\n    }\r\n  \r\n    onInputChangeHandler = (e) => {\r\n      this.setState({ [e.currentTarget.id]: e.currentTarget.value })\r\n    }\r\n  \r\n    onCheckboxChangeHandler = (e) => {\r\n      this.setState({ checked: e.currentTarget.checked })\r\n    }\r\n    validate = () => {\r\n      if (this.state.checked && this.state.name.trim() && this.state.text.trim()) {\r\n        return true\r\n      }\r\n      return false;\r\n    }\r\n    onBtnClickHandler = (e) => {\r\n      e.preventDefault()\r\n      // alert(this.state.name + '\\n' + this.state.text)\r\n      const {name, text, bigText} = this.state\r\n      console.log(name, text, bigText)\r\n      this.props.onAddNews({id: +new Date(), author: name, text, bigText})\r\n    }\r\n    render() {\r\n      return (\r\n        <form className=\"add\">\r\n          <input className='add__author' name='author' id='name' type=\"text\" placeholder='укажите имя' value={this.state.name} onChange={this.onInputChangeHandler} />\r\n          <textarea className='add__text' name='text' id='text' type=\"text\" placeholder='введите заголовок новости' value={this.state.text} onChange={this.onInputChangeHandler} />\r\n          <textarea className='add__text' name='bigText' id='bigText' type=\"text\" placeholder='введите текст новости' value={this.state.bigText} onChange={this.onInputChangeHandler} />\r\n  \r\n          <label className='add__label' htmlFor=\"agree\">я согласен с правилами<input type=\"checkbox\" name=\"agree\" onChange={this.onCheckboxChangeHandler} id=\"agree\" /></label>\r\n          <button type=\"button\" className='add__button' disabled={!this.validate()} onClick={this.onBtnClickHandler}>Показать введенное значение</button>\r\n        </form>\r\n      )\r\n    }\r\n  }\r\n  \r\n  Add.propTypes = {\r\n    onAddNews: PropTypes.func.isRequired, // func используется для проверки передачи function\r\n  }\r\n  export default Add","import React from 'react';\nimport News from './components/News';\n\n\nimport './App.css';\nimport Add from './components/Add';\n\n\nclass App extends React.Component {\n  state = {\n    news: null,\n    isLoading: false,\n  }\n  \n  static getDerivedStateFromProps(props, state) {\n    if(Array.isArray(state.news)) {\n\n      let filteredNews = state.news\n      console.log(filteredNews)\n      filteredNews.forEach((it) => {\n       \n        if(it.bigText.toLowerCase().includes('pubg')) {\n          it.bigText = 'СПАМ'\n        }\n      })\n      return {\n        news: filteredNews\n      }\n    }\n    return null   \n    \n  }\n  componentDidMount() {\n    this.setState({isLoading: true})\n    fetch('http://localhost:3000/data/newsData.json')\n    .then((response) => response.json())\n    .then((data) => {    \n      setTimeout(() => {\n        this.setState({isLoading: false, news: data})\n      }, 3000)  \n            \n    })\n  }\n  handleAddNews = (data) => {    \n    const nextNews = [data, ...this.state.news]\n    this.setState({news: nextNews})\n  }\n  render() {\n    console.log(this.state.news)\n    return <div>\n      <Add onAddNews={this.handleAddNews} />\n      <h3>Новости</h3>\n      {this.state.isLoading && <p>Загружаю...</p>}\n      {Array.isArray(this.state.news) && <News data={this.state.news} />}\n    </div>\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}